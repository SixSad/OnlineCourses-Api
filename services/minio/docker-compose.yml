volumes:
  minio: { }
  minio-store: { }

services:

  minio:
    image: minio/minio
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER?}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD?}
      MINIO_DOMAIN: ${MINIO_CONSOLE_HOST?}
    depends_on:
      traefik:
        condition: service_started
    command: server /data --console-address ":${MINIO_CONSOLE_PORT?}"
    volumes:
      - minio:/data
      - minio-store:/data
    deploy: &labels
      labels:
        # Middlewares
        - traefik.http.services.${COMPOSE_PROJECT_NAME?}-minio.loadbalancer.server.port=9000
        - traefik.http.routers.${COMPOSE_PROJECT_NAME?}-minio.service=${COMPOSE_PROJECT_NAME?}-minio
        - traefik.http.routers.${COMPOSE_PROJECT_NAME?}-minio.rule=Host(`${MINIO_HOST?}`)
        # API
        - traefik.http.routers.${COMPOSE_PROJECT_NAME?}-minio-console.service=${COMPOSE_PROJECT_NAME?}-minio-console
        - traefik.http.services.${COMPOSE_PROJECT_NAME?}-minio-console.loadbalancer.server.port=${MINIO_CONSOLE_PORT?}
        - traefik.http.routers.${COMPOSE_PROJECT_NAME?}-minio-console.rule=Host(`${MINIO_CONSOLE_HOST?}`)
        - traefik.constraint-label=traefik
        - traefik.docker.network=traefik
        - traefik.enable=true
        - io.portainer.accesscontrol.teams=crypto
    <<: *labels
    networks:
      traefik: { }
      default: { }